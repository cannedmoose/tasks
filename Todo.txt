Dark mode (maybe with switch)

Make categories editable

Online sync
  Initial version can be like sheets based

Figure out namecheap too many redirects :/

Touch interactions

WebComponent doc
/** Thoughts on using things:
 *    Attribute
 *      - Renders (anything we want to render in HTML needs to be here)
 *      - If we want to set behaviour in template it should be an attributes (+ probs class variable)
 *      - TROUBLE bubble. If we have a child component whose attribute we should mirror this is hard
 *      - maybe avoid for now until we have better ways to do it
 *      - NOTE: we could set data attribute to reflect things in DOM without using in built attribute. Consider that.
 *      - I feel like it would be more automatic
 *    CSS class
 *      - Boolean
 *      - Local to shadow DOM they're declared in
 *        - Not even global ones will be applied in shadow
 *      - TO USE EFFECTIVELY BETWEEN CUSTOM ELEMENTS:
 *        - Register them (on element or class)
 *        - Adds a style tag with the class to be applied
 *        - class can then be toggled at will
 *        - Maybe do this when we have more than interacting class to try it on
 *    Class variable
 *      - As long as we don't remove a DOM node they stick around
 *      - getters and setters allow programmitic shiz
 *      - So ideally when a DOM node represents something as long as it represents the same thing it won't change actual nodes
 *    events
 *      - allow to pass a lot of info up the dom tree
 *      - Very flexible
 *      - CustomEvents seem to have bubbling problem
 *      - rules should follow for events:
 *        - SHOULD have component name in them eg task-change
 *            This way if we're catching up the tree we don't get inundated with a bunch of diff types
 *        - SHOULD have convenience methods for adding/removing
 *          Maybe web components has:
 *            addListener(event, callback)
 *     WebComponent:
 *        - Binding convenience:
 *           find _bound functions in constructor
 *           BIND THEM (convenience for callbacks)
 *        - Event convenience:
 *          - addListener()
 *          - removeListener()
 *          all added listeners cleaned up on disconnect
 *        - TEMPLATE convenience
 *          Automatically renders template
 *          Should fill in slots
 *          function to fill in slots
 *          Should return dom node
 *          Format <slot_name>_slot
 *          called on RENDER ONLY
 *        -  convenience SUBSTITUTES
 *          automatically sub textContent for given value with given classname
 *          format <sub_name>_sub
 *          called on RENDER AND REFRESH
 *        - ESCAPE convenience (needed? check textContent escaping)
 *          will escape given html content
 *
 *        LIFECYCLE:
 *          render - will render template with given slots
 *              - SHOULD this just be text based?
 *                Leaning towards this
 *                Can do it be classnames
 *                queryAll the relevant classname
 *                replace text
 *              - This should also create elements from programatically
 *          refresh -
 *                - will refresh template slots
 *                - Should avoid removing/creating elements
 *                - just call slots from render
 *                - calls render on relevant children.
 *
 *          -- refresh SHOULD ONLY BE TRIGGERED FROM THE HIGHEST LEVEL
 *          -- WHAT HAPPENS IF REFRESH TRIGGERS A CHANGE
 *          -- FUCK IT HOPEFULLY SHOULDN'T
 *          -- How to prevent?
 *          -- We want to make sure changes don't trigger events which then trigger refresh
 *          -- UNLESS THAT WAS WANTED
 *          -- WHEN IS THAT WHANTED (eg confirming task edit is event that should trigger refresh)
 *            -- NOT ALL CHANGES SHOULD TRIGGER A FULL REFRESH?
 *          -- When is a self refresh allowed?
 *            -- should figure it out
 *            -- feels like components without sub components should
 *
 *
 * Do we wanna go for react style render?
 *   I kinda don't wanna
 *   What I would rather is a render and refresh method
 *   Render does the initial (hopefully heavy rendering)
 *   refresh changes that render to reflect data
 *   Refresh should try it's best not to add/remove elements
 *   So homepages refresh would be:
 *      hit refresh on each task list
 *   task lists refresh would be:
 *      filter tasks, for each task
 *      iterate through task elements
 *      set task for those we need, tell them to refresh
 *      remove those we no longer need*/
